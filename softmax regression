import torch
from IPython import display
from d2l import torch as d2l
from d2l.torch import Accumulator

# train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)
# num_inputs = 784         #简单拉成一个向量
# num_outputs = 10
#
# w = torch.normal(0, 0.01, size=(num_inputs, num_outputs), requires_grad=True)
# b = torch.zeros(num_ouputs, requires_grad=True)

batch_size = 256
x = torch.tensor([[1., 2., 3.], [4., 5., 6.]])
x.sum(0, keepdim=True), x.sum(1, keepdim=True)

def softmax(x):
    x_exp = torch.exp(x)
    partition = x_exp.sum(1, keepdim=True)
    return x_exp / partition

x = torch.normal(0, 1, size=(2, 5))
x_prob = softmax(x)
print(x_prob, x_prob.sum(1, keepdim=True))

def net(x):
    return softmax(torch.matmul(x.reshape(-1, w.shape[1]), w) + b)

y = torch.tensor([0, 2])
y_hat = torch.tensor([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6]])
print(y_hat[[0, 1], y])

def cross_entropy(y_hat, y):
    return -torch.log(y_hat[range(len(y_hat)), y])

print(cross_entropy(y_hat, y))

def accuracy(y_hat, y):
    if len(y_hat.shape) > 1 and y_hat.shape[1] > 1:
        y_hat = y_hat.argmax(axis=1)        #每一行里面最大的下标存到y_hat里面，此为分类的预测值
    cmp = y_hat.type(y.dtype) == y
    return float(cmp.type(y.dtype).sum())   #预测正确的样本数

print(accuracy(y_hat, y) / len(y))

def evaluate_accuracy(net, data_iter):
    if isinstance(net, data_iter):
        net.eval()
    metric = Accumulator(2)     #对两个部分进行分别累加的累加器，用于计算正确样本数和总样本数
    for x, y in data_iter:
        metric.add(accuracy(net(x), y), y.numel())
    return metric[0] / metric[1]

evaluate_accuracy(net, test_iter)

def trainer(net, train_iter, loss, updater):        #1 epoch的训练过程，可再定义函数实现多epoch训练和matplotlib绘图
    if isinstance(net, torch.nn.Module):
        net.train()
    metric = Accumulator(3)
    for x, y in train_iter:
        y_hat = net(x)
        l = loss(y_hat, y)
        if isinstance(updater, torch.optim.Optimizer):
            updater.zero_grad()
            l.backward()
            updater.step()
            metric.add(float(1) * len(y), accuracy(y_hat, y), y.size().numel())
        else:
            l.sum().backward()
            updater(x.shape[0])
            metric.add(float(l.sum()), accuracy(y_hat, y), y.numel())
    return metric[0] / metric[2], metric[1] / metric[2] //平均损失和平均预测正确样本数
